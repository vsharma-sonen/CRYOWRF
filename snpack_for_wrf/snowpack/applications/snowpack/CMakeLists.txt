INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/")
INCLUDE("${CMAKE_MODULE_PATH}/BuildVersion.cmake")
BuildVersion()

IF(MSVC)
	SET(getopt_src getopt.c getopt_long.c)
ENDIF(MSVC)

SET(snowpack-app_sources
	Main.cc
	${getopt_src}
)

#get the proper Snowpack library
IF(BUILD_SHARED_LIBS)
	SET(LIBSNOWPACK_LIBRARY ${PROJECT_NAME})
ELSE(BUILD_SHARED_LIBS)
	IF(BUILD_STATIC_LIBS)
		SET(LIBSNOWPACK_LIBRARY "${PROJECT_NAME}_STATIC")
	ELSE(BUILD_STATIC_LIBS)
		MESSAGE(SEND_ERROR "Not building Snowpack, the standalone application won't be able to build")
	ENDIF(BUILD_STATIC_LIBS)
ENDIF(BUILD_SHARED_LIBS)
INCLUDE_DIRECTORIES(../../)

FIND_PACKAGE(MeteoIO REQUIRED)
INCLUDE_DIRECTORIES(${METEOIO_INCLUDE_DIR})

IF(APPLE)
	#this is necessary for GUI exceptions
	SET(EXTRA_LINKS "-framework CoreServices")
ENDIF(APPLE)
IF(UNIX)
	SET(EXTRA_LINKS "dl;pthread")
ENDIF(UNIX)

#Prepare executable
SET(BINARY "snowpack.app")
ADD_EXECUTABLE(${BINARY} ${snowpack-app_sources})
TARGET_LINK_LIBRARIES(${BINARY} ${LIBSNOWPACK_LIBRARY} ${METEOIO_LIBRARY} ${EXTRA_LINKS})

SET_TARGET_PROPERTIES(${BINARY} PROPERTIES
	RUNTIME_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/bin"
	CLEAN_DIRECT_OUTPUT 1
	OUTPUT_NAME "snowpack"
)

INSTALL(TARGETS ${BINARY}
	RUNTIME DESTINATION bin
	COMPONENT exe
)
